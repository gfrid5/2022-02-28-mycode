---
- name: PowerProtect Data Domain Series Appliances - Example
  
  # if you only have a SINGLE api endpoint,
  # it is prob easiest not even to mess with an inventory
  #hosts: localhost
  #
  # in our case, we have MULTIPLE api endpoints
  #hosts: powerprotect_ddsa # resolved in an inventory (we want to leverage concurrnt behavior... i.e forking)
  hosts: powerprotect_ddsa
  
  # anytime your playbook is doing HTTP (exclusively)
  connection: local # set connection to local (no SSH protocol)

  # if this does run, we end up gather facts about OURSELF
  gather_facts: false

  # tasks are being created from documentation available @ https://developer.dell.com/apis/4118/versions/7.8/reference
  tasks:

          # Grab an AUTH token our solution can use to interact with PowerProtect DataDomain
          - name: POST - Create authentication token.
            uri:
                # API DOC EXAMPLE - https://localhost:3009/rest/v1.0/auth
                validate_certs: no
                url: "https://{{ ddsa_ip }}:{{ ddsa_port }}/rest/v1.0/auth"
                method: POST
                body_format: json
                body: "{ \"auth_info\": {\"username\":\"{{ username }}\", \"password\":\"{{ password }}\" }}"
                status_code: 201 # per the documenation, an HTTP 201 is returned to our lookup
            register: results

          - name: Show the results
            debug:
                    var: results

          - name: Show JUST the token
            debug:
                    var: results.X-DD-AUTH-TOKEN

          - name: Create a new variable on the fly to make the token more accessible
            set_fact:
                    token: "{{ results.x_dd_auth_token }}"

          - name: Show JUST the token
            debug:
                    var: token
